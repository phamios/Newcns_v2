
/* Controltag Loader for Digital Trends */
(function(){
  function debugLog(msg) {
    var isDebug = /kxdebug=(1|true)/.test(location);
    if (isDebug && typeof window.console === 'object' && typeof console.info === 'function') {
      console.info(msg);
    }
  }

  function loadCT(url, callback) {
    debugLog('Loading Krux control tag.');
    var ct_element = document.createElement('script');
    ct_element.async = true;
    ct_element.src = url;

    ct_element.onload = ct_element.onreadystatechange = function() {
      var state = ct_element.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        callback.done = true;
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(ct_element, sibling);
  };

  function loadConfig() {
    
    
    debugLog('Loading krux configuration.');

    var config = {"partner_segment_map": {}, "context_terms": [], "tags": [{"content": "<script>\r\n(function(){\r\n        var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n            var prefix = location.protocol == 'https:' ? \"https:\" : \"http:\";\r\n            var kurl = prefix + '//beacon.krxd.net/usermatch.gif?src=digitaltrends&adnxs_uid=$UID';\r\n            var appnexus_url = '//ib.adnxs.com/getuid?' + kurl\r\n            var i = new Image();\r\n            i.src = appnexus_url;\r\n        }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "method": "document", "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "asap", "type": "publisher", "id": 28081, "name": "Appnexus Connect"}, {"content": "<script type=\"text/javascript\">\r\n// DFP premium\r\n(function(require) {\r\n  var store = require('store');\r\n  var _ = require('util');  \r\n  var segments;\r\n  \r\n  function handleUserDataResponse(r) {\r\n    // Handle the response as usual.\r\n    segments.handleUserDataResponse(r);\r\n    \r\n    // Override localStorage.kxuser with a case-insensitive value for DFP premium.\r\n    // This will get read by the interchange direct snippet for Krux.user\r\n    // and Krux.dfpKeyValues\r\n    if(r.kuid_long) {\r\n      store.set('user', r.kuid_long, store.DAYS*30);\r\n    }\r\n  }\r\n  \r\n  // Our own fetch uses our own handleResponse\r\n  function fetch() {\r\n    var options = {\r\n      url: _.get('url_userData'),\r\n      data: {pubid: _.get('pubid')},\r\n      callback: 'kxjsonp_userData',\r\n      done: handleUserDataResponse\r\n    };\r\n    if(!segments.readTechFromStore()) {\r\n      options.data.technographics = 1;\r\n    }\r\n    require('http').jsonp(options);  \r\n  }\r\n  \r\n  \r\n  if(!store.get('segWait')) {\r\n    // disable segments.fetch and use our own\r\n    _.set('segWait', 1, store.MINUTES*5);\r\n    _.onOnce('dom:load', fetch);\r\n    _.fire('user_data_fetch_scheduled');\r\n  }\r\n  \r\n  // Finally, require segments as usual.\r\n  segments = require('segments');\r\n}(Krux.require));\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 2, "internal": 1, "content_type": "html", "timing": "asap", "type": "publisher", "id": 27573, "name": "Krux Load Segments v2"}, {"content": "<script>\r\n(function() {\r\n  // adadvisor redirects to http://logger... so it's not https safe\r\n  if (location.protocol == \"http:\") {\r\n     var u = \"https://adadvisor.net/adscores/g.js?sid=9212244187&_kdpid=2111c0af-fc3a-446f-ab07-63aa74fbde8e\";\r\n     (new Image()).src = u;\r\n   }\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 22, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28421, "name": "AdAdvisor S2S provider tag"}, {"content": "<script>\r\n(function() {\r\n  // adadvisor redirects to http://logger... so it's not https safe\r\n  if (location.protocol == \"http:\") {\r\n     var u = \"http://adadvisor.net/adscores/g.js?sid=9212244187&_kdpid=911765d2-536f-4475-8fd5-92b73478fb8f\";\r\n     (new Image()).src = u;\r\n   }\r\n})();\r\n</script>\r\n", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28422, "name": "Targus/AdAdvisor provider tag"}, {"content": "<script>\r\n// Blank\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 19, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28423, "name": "Nielsen (via Exelate) provider tag"}, {"content": "<img src=\"//apiservices.krxd.net/um?partner=bluekai&r=http://tags.bluekai.com/site/6644\">", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 10, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28424, "name": "Bluekai provider tag"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 6, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 27548, "name": "Technographic Data provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 14, "content_type": "html", "freq_cap": 3, "timing": "onload", "id": 27549, "name": "Krux Geographic Data provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//p.acxiom-online.com/pixel/sci\",\r\n      data: {\r\n          uid: kuid,\r\n          _kdpid: 'f19b7626-3732-4dcc-bac5-8d2c937dae9a',\r\n          pid: 3021\r\n      }});\r\n  }\r\n  })();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 21, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28103, "name": "Acxiom S2S provider tag"}, {"content": "<script>\r\n  Krux('require:http').pixel({\r\n    url: \"//p.brilig.com/contact/bct\",\r\n    data: {\r\n      pid: \"9354001b-d428-4e7c-9115-ffd042a2f184\",\r\n      _ct: \"pixel\",\r\n      puid: Krux('get', 'user'),\r\n      REDIR: \"http://beacon.krxd.net/data.gif?_kdpid=c3f63723-4104-46a9-9bda-e72960b2959a\"\r\n    }\r\n  });\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 20, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28104, "name": "Brilig provider tag"}, {"content": "<script>\r\n(function() {\r\n  // krxd.nexac.com throws SSL cert errors so only fire this tag\r\n  // on HTTP pages\r\n  if (location.protocol == \"http:\") {\r\n      var Krux = window.Krux;\r\n      var kuid = Krux('get', 'user');\r\n      if (kuid) {\r\n         var u = \"http://krxd.nexac.com/dlx.gif?_kdpid=2dd640a6-6ebd-4d4f-af30-af8baa441a0d&kuid=\" + kuid;\r\n         (new Image()).src = u;\r\n      }\r\n   }\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 8, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28105, "name": "DataLogix provider tag"}, {"content": "<script>\r\n  Krux('require:http').pixel({\r\n    url: \"//s.ixiaa.com/digi/C726AB29-0470-440B-B8D2-D552CED3A3DC/a.gif\"\r\n  });\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 28, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28106, "name": "IXI Digital (Open Market) provider tag"}, {"content": "<script>\r\n(function(){\r\n  if (window.KRUX) {\r\n    var pubid = KRUXSetup.pubid;\r\n  } else if (window.Krux) {\r\n    var pubid = Krux('get', 'pubid');\r\n  } else { \r\n    return;\r\n  }\r\n  var prefix = location.protocol == 'https:' ? \"https:\" : \"http:\";\r\n  var kurl = prefix + '//beacon.krxd.net/data.gif?_kdpid=890a6228-04af-4630-85b6-0b49dee6157f&pid=' + pubid;\r\n  var u = prefix + '//api.bizographics.com/v1/profile.redirect?api_key=595bae8dbc0c4c42b4544e688b10c002' + \r\n        '&callback_url=' + escape(kurl);\r\n  var i = new Image();\r\n  i.src = u;\r\n})();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 2, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28107, "name": "Bizo provider tag"}, {"content": "<script>\r\n(function(){\r\n  var kuid = Krux('get', 'user');\r\n  if (kuid) {\r\n    Krux('require:http').pixel({\r\n      url: \"//loadm.exelator.com/load\",\r\n      data: {\r\n          _kdpid: 'e4942ff0-4070-4896-a7ef-e6a5a30ce9f9',\r\n          buid: kuid,\r\n          p: '204',\r\n          g: '270',\r\n          j: '0'\r\n      }});\r\n  }\r\n  })();\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "method": "document", "execution_results": null, "tier": 1, "internal": 11, "content_type": "html", "freq_cap": 3, "timing": "onload", "type": "data provider", "id": 28108, "name": "eXelate Media provider tag"}, {"content": "<script>\r\n// Using UrlPath 1 to produce page attribute url_path_1\r\nKrux('scrape', { \"page_attr_url_path_1\": {url_path: \"1\"}});\r\n// Using UrlPath 2 to produce page attribute url_path_2\r\nKrux('scrape', { \"page_attr_url_path_2\": {url_path: \"2\"}});\r\n// Using UrlPath 3 to produce page attribute url_path_3\r\nKrux('scrape', { \"page_attr_url_path_3\": {url_path: \"3\"}});\r\nKrux('scrape', { \"page_attr_manufacturer\": {meta_name: \"manufacturer\"}});\r\nKrux('scrape', { \"page_attr_model\": {meta_name: \"model\"}});\r\nKrux('scrape', { \"page_attr_tags\": {meta_name: \"tags\"}});\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "method": "document", "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onready", "type": "publisher", "id": 27761, "name": "Krux Data Transfer Code"}], "segments": [], "publisher": {"uuid": "7d57e4e4-b383-4007-a94b-f8a5c9be6ae9", "id": 12115, "name": "Digital Trends"}, "controltag_options": {"async": "true", "render": true}, "site": {"id": 15513, "name": "Digital Trends"}, "dnt": null, "params": {"revenue_optimization": false, "control_tag_pixel_throttle": "100", "context_terms": "false", "jslog_host": "jslog.krxd.net", "capture_js_errors": "true", "control_tag_load_sync": "false", "site_level_supertag_config": "site", "max_slot_time": 1000, "services_host": "apiservices.krxd.net", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "control_tag_stats_prefix": null, "no_pii": 0, "beacon_host": "beacon.krxd.net", "control_tag_namespace": null, "control_tag_version": "stable", "datatag_version": "3", "supertag_requires_approval": false}, "services": {"impression": "//beacon.krxd.net/ad_impression.gif", "stats": "//apiservices.krxd.net/stats", "log": "//jslog.krxd.net/jslog.gif", "userData": "//apiservices.krxd.net/user_data/segments/3", "pixel": "//beacon.krxd.net/pixel.gif", "um": "//apiservices.krxd.net/um", "social": "//beacon.krxd.net/social.gif", "data": "//beacon.krxd.net/data.gif", "event": "//beacon.krxd.net/event.gif"}, "geo":{"COUNTRY":"VN", "REGION":"", "CITY":"HANOI", "GEOREGION":"233", "DMA":"", "PMSA":"", "AREACODE":"", "COUNTY":"", "FIPS":"", "LATITUDE":"21.03", "LONGITUDE":"105.85", "TIMEZONE":"GMT 7", "ZIP":"", "CONTINENT":"AS"}, "realtime_segments": [{"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_model", "[\"samsung galaxy s4 active\", \"samsung galaxy s4 zoom\", \"hands on: samsung galaxy s5\"]"]]]]], "id": "oc60bwicx"}, {"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_tags:,", "[\"oled\", \"4k\", \"curved oled\", \"4k ultra hd\", \"4k tvs\", \"amoled\", \"4k tv\", \"4k streaming\", \"ultra hd 4k\", \"4k upscaling\", \"uhd tv\", \"4k resolution\", \"uhd\", \"4ktv\", \"4k/uhd\"]"]]]]], "id": "oc66w17cl"}, {"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_manufacturer", "[\"irobot\"]"], ["intersects", "$page_attr_tags:,", "[\"robot vacuum\", \"vacuum cleaner\", \"neato robotic vacuum\", \"robot vacuum cleaner\", \"vacuum\", \"dyson robotic vacuum\", \"soniclean vacuum\", \"ultrasonic vacuum\", \"robotic vacuum cleaner\"]"]]]]], "id": "odvtynau8"}, {"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_url_path_1", "[\"home\"]"]]]]], "id": "odzohlzyx"}, {"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_url_path_1", "[\"best-digital-cameras\", \"digital-camera-reviews\"]"], ["intersects", "$page_attr_tags:,", "[\"nikon 1 j3\", \"nikon d7100\", \"nikon\", \"nikon d4\", \"nikon d4s\", \"nikon 1 aw1\", \"nikon 1-j1\", \"nikon d610\", \"nikon coolpix\", \"nikon behind the scenes\", \"nikon 1 v3\", \"nikon d3300\", \"nikon coolpix l830\", \"nikon japan\", \"nikon 1 j4\"]"]]]]], "id": "oeijcnem8"}], "confid": "IwNLJc7X"};

    // Wrap in a function and comment, then toString the func and replace
    // everything that's not the beginning or end of a JSON object, so we get a
    // string that's either empty or JSON.
    var esiGeo = String(function(){/*
      <esi:include src="/geoip_esi"/>
    */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

    if (esiGeo) {
      config.geo = esiGeo;
    }

    Krux('config', config);
    
  };

  loadCT( "//cdn.krxd.net/ctjs/controltag.js.ae7f2374304abe49e3ec18a3fb32755f", loadConfig );
})();
